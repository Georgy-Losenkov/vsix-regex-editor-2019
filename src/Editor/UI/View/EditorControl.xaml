<UserControl
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:pui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
    xmlns:v="clr-namespace:Losenkov.RegexEditor.UI.View"
    xmlns:vm="clr-namespace:Losenkov.RegexEditor.UI.ViewModel"
    x:Class="Losenkov.RegexEditor.UI.EditorControl"
    d:DesignHeight="700"
    d:DesignWidth="600"
    Background="{DynamicResource VsBrush.ToolWindowBackground}"
    UseLayoutRounding="True"
    mc:Ignorable="d">
    <UserControl.Resources>
        <v:RegexMethodConverter x:Key="RegexMethodConverter" />
        <v:TesterModeConverter x:Key="TesterModeConverter" />
        <Style x:Key="Separator-Border-Style" TargetType="{x:Type Border}">
            <Setter Property="Background" Value="{DynamicResource VsBrush.EnvironmentBackground}" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Height" Value="4" />
        </Style>
        <Style x:Key="Control-Border-Style" TargetType="{x:Type Border}">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{DynamicResource VsBrush.WindowFrame}" />
            <Setter Property="MinHeight" Value="50" />
            <Setter Property="Margin" Value="0,1,1,1" />
        </Style>
        <Style x:Key="Header-TextBlock-Style" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="{DynamicResource VsBrush.WindowText}" />
            <Setter Property="Margin" Value="0,0,4,0" />
        </Style>
        <Style x:Key="Header-StackPanel-Style" TargetType="{x:Type StackPanel}">
            <Setter Property="Orientation" Value="Vertical" />
            <Setter Property="Margin" Value="4,1,4,1" />
        </Style>
        <Style x:Key="Splitter-Style" TargetType="{x:Type GridSplitter}">
            <Setter Property="ResizeBehavior" Value="BasedOnAlignment" />
            <Setter Property="ResizeDirection" Value="Rows" />
            <Setter Property="ShowsPreview" Value="True" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GridSplitter}">
                        <Border Style="{StaticResource Separator-Border-Style}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxBorderBrushKey}}" />
            <Setter Property="Background" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxBackgroundBrushKey}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxTextBrushKey}}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid
                            x:Name="templateRoot"
                            Background="Transparent"
                            SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Border
                                x:Name="checkBoxBorder"
                                Margin="1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid x:Name="markGrid">
                                    <Path
                                        x:Name="optionMark"
                                        Margin="1"
                                        Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z"
                                        Fill="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxGlyphBrushKey}}"
                                        Opacity="0"
                                        Stretch="None" />
                                    <Rectangle
                                        x:Name="indeterminateMark"
                                        Margin="2"
                                        Fill="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxGlyphBrushKey}}"
                                        Opacity="0" />
                                </Grid>
                            </Border>
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Grid.Column="1"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="True">
                                <Setter Property="FocusVisualStyle">
                                    <Setter.Value>
                                        <Style>
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Rectangle
                                                            Margin="14,0,0,0"
                                                            SnapsToDevicePixels="True"
                                                            Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                                            StrokeDashArray="1 2"
                                                            StrokeThickness="1" />
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Padding" Value="4,-1,0,0" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxBackgroundHoverBrushKey}}" />
                                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxBorderHoverBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxTextHoverBrushKey}}" />
                                <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxGlyphHoverBrushKey}}" />
                                <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxGlyphHoverBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxBackgroundDisabledBrushKey}}" />
                                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxBorderDisabledBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxTextDisabledBrushKey}}" />
                                <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxGlyphDisabledBrushKey}}" />
                                <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxGlyphDisabledBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxBackgroundPressedBrushKey}}" />
                                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxBorderPressedBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxTextPressedBrushKey}}" />
                                <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxGlyphPressedBrushKey}}" />
                                <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource {x:Static pui:CommonControlsColors.CheckBoxGlyphPressedBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                                <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                                <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <UserControl.DataContext>
        <vm:EditorViewModel />
    </UserControl.DataContext>
    <Grid Grid.IsSharedSizeScope="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="0" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition
                x:Name="rdPattern"
                Height="60"
                MinHeight="50" />
            <RowDefinition Height="auto" />
            <RowDefinition
                x:Name="rdReplacement"
                Height="60"
                MinHeight="50" />
            <RowDefinition Height="auto" />
            <RowDefinition
                x:Name="rdInputResults"
                Height="*"
                MinHeight="50" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" SharedSizeGroup="Captions" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="0" Style="{StaticResource Header-StackPanel-Style}">
                <TextBlock Style="{StaticResource Header-TextBlock-Style}"><Run Text="Options:" /></TextBlock>
            </StackPanel>
            <Grid Grid.Column="1">
                <Grid.Resources>
                    <Style
                        x:Key="CheckBox-Style"
                        BasedOn="{StaticResource {x:Type CheckBox}}"
                        TargetType="{x:Type CheckBox}">
                        <Setter Property="Margin" Value="0,2,8,2" />
                    </Style>
                    <Style x:Key="ToolTip-Style" TargetType="{x:Type TextBlock}">
                        <Setter Property="Margin" Value="4" />
                        <Setter Property="MaxWidth" Value="400" />
                        <Setter Property="TextWrapping" Value="Wrap" />
                    </Style>
                </Grid.Resources>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                </Grid.RowDefinitions>
                <CheckBox
                    Grid.Row="0"
                    Grid.Column="0"
                    Content="Compiled"
                    IsChecked="{Binding Compiled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource CheckBox-Style}">
                    <CheckBox.ToolTip>
                        <TextBlock Style="{StaticResource ToolTip-Style}"><Run Text="Specifies that the regular expression is compiled to an assembly. This yields faster execution but increases startup time."/></TextBlock>
                    </CheckBox.ToolTip>
                </CheckBox>
                <CheckBox
                    Grid.Row="1"
                    Grid.Column="0"
                    Content="Culture Invariant"
                    IsChecked="{Binding CultureInvariant, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource CheckBox-Style}">
                    <CheckBox.ToolTip>
                        <TextBlock Style="{StaticResource ToolTip-Style}"><Run Text="Specifies that cultural differences in language is ignored."/></TextBlock>
                    </CheckBox.ToolTip>
                </CheckBox>
                <CheckBox
                    Grid.Row="2"
                    Grid.Column="0"
                    Content="ECMA Script"
                    IsChecked="{Binding ECMAScript, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource CheckBox-Style}">
                    <CheckBox.ToolTip>
                        <TextBlock Style="{StaticResource ToolTip-Style}"><Run Text="Enables ECMAScript - compliant behavior for the expression. This value can be used only in conjunction with the &quot;Ignore Case&quot;, &quot;Multiline&quot; and &quot;Compiled&quot; values. The use of this value with any other values results in an exception."/></TextBlock>
                    </CheckBox.ToolTip>
                </CheckBox>
                <CheckBox
                    Grid.Row="0"
                    Grid.Column="1"
                    Content="Explicit Capture"
                    IsChecked="{Binding ExplicitCapture, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource CheckBox-Style}">
                    <CheckBox.ToolTip>
                        <TextBlock Style="{StaticResource ToolTip-Style}"><Run Text="Specifies that the only valid captures are explicitly named or numbered groups of the form (?&lt;name&gt;…). This allows unnamed parentheses to act as noncapturing groups without the syntactic clumsiness of the expression (?:…)."/></TextBlock>
                    </CheckBox.ToolTip>
                </CheckBox>
                <CheckBox
                    Grid.Row="1"
                    Grid.Column="1"
                    Content="Ignore Case"
                    IsChecked="{Binding IgnoreCase, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource CheckBox-Style}">
                    <CheckBox.ToolTip>
                        <TextBlock Style="{StaticResource ToolTip-Style}"><Run Text="Specifies case-insensitive matching."/></TextBlock>
                    </CheckBox.ToolTip>
                </CheckBox>
                <CheckBox
                    Grid.Row="2"
                    Grid.Column="1"
                    Content="Ignore Pattern Whitespace"
                    IsChecked="{Binding IgnorePatternWhitespace, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource CheckBox-Style}">
                    <CheckBox.ToolTip>
                        <TextBlock Style="{StaticResource ToolTip-Style}"><Run Text="Eliminates unescaped white space from the pattern and enables comments marked with #. However, this value does not affect or eliminate white space in character classes, numeric quantifiers, or tokens that mark the beginning of individual regular expression language elements."/></TextBlock>
                    </CheckBox.ToolTip>
                </CheckBox>
                <CheckBox
                    Grid.Row="0"
                    Grid.Column="2"
                    Content="Multiline"
                    IsChecked="{Binding Multiline, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource CheckBox-Style}">
                    <CheckBox.ToolTip>
                        <TextBlock Style="{StaticResource ToolTip-Style}"><Run Text="Multiline mode. Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string."/></TextBlock>
                    </CheckBox.ToolTip>
                </CheckBox>
                <CheckBox
                    Grid.Row="1"
                    Grid.Column="2"
                    Content="Right To Left"
                    IsChecked="{Binding RightToLeft, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource CheckBox-Style}">
                    <CheckBox.ToolTip>
                        <TextBlock Style="{StaticResource ToolTip-Style}"><Run Text="Specifies that the search will be from right to left instead of from left to right."/></TextBlock>
                    </CheckBox.ToolTip>
                </CheckBox>
                <CheckBox
                    Grid.Row="2"
                    Grid.Column="2"
                    Content="Singleline"
                    IsChecked="{Binding Singleline, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource CheckBox-Style}">
                    <CheckBox.ToolTip>
                        <TextBlock Style="{StaticResource ToolTip-Style}"><Run Text="Specifies single-line mode. Changes the meaning of the dot (.) so it matches every character (instead of every character except \n)."/></TextBlock>
                    </CheckBox.ToolTip>
                </CheckBox>
            </Grid>
        </Grid>
        <Border Grid.Row="2" Style="{StaticResource Separator-Border-Style}" />
        <Grid Grid.Row="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" SharedSizeGroup="Captions" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="0" Style="{StaticResource Header-StackPanel-Style}">
                <TextBlock Style="{StaticResource Header-TextBlock-Style}"><Run Text="Pattern:" /></TextBlock>
            </StackPanel>
            <Border Grid.Column="1" Style="{StaticResource Control-Border-Style}">
                <ContentControl x:Name="phPattern" />
            </Border>
        </Grid>
        <GridSplitter Grid.Row="4" Style="{StaticResource Splitter-Style}" />
        <Grid Grid.Row="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" SharedSizeGroup="Captions" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="0" Style="{StaticResource Header-StackPanel-Style}">
                <TextBlock Style="{StaticResource Header-TextBlock-Style}"><Run Text="Replacement:" /></TextBlock>
            </StackPanel>
            <Border Grid.Column="1" Style="{StaticResource Control-Border-Style}">
                <ContentControl x:Name="phReplacement" />
            </Border>
        </Grid>
        <GridSplitter Grid.Row="6" Style="{StaticResource Splitter-Style}" />
        <Grid Grid.Row="7">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" MinHeight="50" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="*" MinHeight="50" />
            </Grid.RowDefinitions>

            <Grid Grid.Row="0" Panel.ZIndex="6">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ResultsVisible}" Value="False">
                                <Setter Property="Grid.RowSpan" Value="3" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" SharedSizeGroup="Captions" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0" Style="{StaticResource Header-StackPanel-Style}">
                    <TextBlock Style="{StaticResource Header-TextBlock-Style}" Text="Input:" />
                    <CheckBox
                        Margin="4,0"
                        Content="as array"
                        Focusable="False"
                        IsChecked="{Binding MultilineInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <CheckBox.ToolTip>Treat input as array of strings when and handle them separately.</CheckBox.ToolTip>
                    </CheckBox>
                </StackPanel>
                <Border Grid.Column="1" Style="{StaticResource Control-Border-Style}">
                    <ContentControl x:Name="phInput" />
                </Border>
            </Grid>
            <GridSplitter Grid.Row="1">
                <GridSplitter.Style>
                    <Style BasedOn="{StaticResource Splitter-Style}" TargetType="{x:Type GridSplitter}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ResultsVisible}" Value="False">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </GridSplitter.Style>
            </GridSplitter>
            <Grid Grid.Row="2">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ResultsVisible}" Value="False">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" SharedSizeGroup="Captions" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0" Style="{StaticResource Header-StackPanel-Style}">
                    <TextBlock Style="{StaticResource Header-TextBlock-Style}" Text="Results:" />
                    <StackPanel Orientation="Horizontal">
                        <StackPanel.Style>
                            <Style TargetType="{x:Type StackPanel}">
                                <Setter Property="Visibility" Value="Visible" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Results.State}" Value="None">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <Border
                            Background="{DynamicResource {x:Static pui:InfoBarColors.InfoBarBackgroundBrushKey}}"
                            BorderBrush="{DynamicResource {x:Static pui:InfoBarColors.InfoBarBorderBrushKey}}"
                            BorderThickness="1">
                            <TextBlock
                                Margin="4,1,4,1"
                                FontWeight="Bold"
                                Foreground="{DynamicResource {x:Static pui:InfoBarColors.InfoBarBackgroundTextBrushKey}}">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Text" Value="Truncated" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Results.State}" Value="TimedOut">
                                                <Setter Property="Text" Value="Timed Out" />
                                                <Setter Property="ToolTip" Value="Execution has been terminated because of 5s timeout" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Results.State}" Value="Truncated">
                                                <Setter Property="Text" Value="Truncated" />
                                                <Setter Property="ToolTip" Value="Execution has been terminated because number of objects generated reached its' limit" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Border>
                    </StackPanel>
                </StackPanel>
                <Border Grid.Column="1" Style="{StaticResource Control-Border-Style}">
                    <v:ResultsControl
                        DataContext="{Binding Results, Mode=OneWay}"
                        Selector.SelectionChanged="DataGrid_SelectionChanged"
                        TreeView.SelectedItemChanged="TreeView_SelectedItemChanged" />
                </Border>
            </Grid>
        </Grid>
    </Grid>
</UserControl>