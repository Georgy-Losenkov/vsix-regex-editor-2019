// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Losenkov.RegexEditor.UI.Generators
{
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class VbCodeTemplate : CodeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("Option Explicit On\r\nOption Strict On\r\n\r\nImports System\r\nImports System.Text.Regul" +
                    "arExpressions\r\nImports VB = Microsoft.VisualBasic\r\n\r\nNamespace Test\r\n  Module Pr" +
                    "ogram\r\n    Private pattern As String = ");
            
            #line 16 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.QuoteSnippetString(this.PatternText, "        ")));
            
            #line default
            #line hidden
            this.Write("\r\n    Private options As RegexOptions = ");
            
            #line 17 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(" | ", this.Options)));
            
            #line default
            #line hidden
            this.Write("\r\n    Private input As String = ");
            
            #line 18 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.QuoteSnippetString(this.InputText, "        ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 19 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

  for (Int32 i = 0; i < this.Methods.Length; i++)
  {
    var method = this.Methods[i];
    var methodName = (this.Methods.Length == 1) ? "Main" : String.Format("Test{0}", i);


            
            #line default
            #line hidden
            this.Write("    Sub ");
            
            #line 26 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("(ByVal args As String())\r\n      Dim regex As New Regex(pattern, options, TimeSpan" +
                    ".FromMilliseconds(1000))\r\n");
            
            #line 28 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

    if (method.RegexMethod == Model.RegexMethod.Match)
    {

            
            #line default
            #line hidden
            this.Write("\r\n      Dim groupNames As String() = regex.GetGroupNames()\r\n      Dim groupNumber" +
                    "s As Int32() = regex.GetGroupNumbers()\r\n");
            
            #line 35 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

    }
    if (method.RegexMethod == Model.RegexMethod.Replace)
    {

            
            #line default
            #line hidden
            this.Write("\r\n      Dim replacement As String = ");
            
            #line 41 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.QuoteSnippetString(this.ReplacementText, "        ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 42 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

    }

    if (method.MultilineInput)
    {

            
            #line default
            #line hidden
            this.Write("      Using reader As New System.IO.StringReader(input)\r\n        Dim i As Int32 =" +
                    " 1\r\n        While True\r\n          Dim line As String = reader.ReadLine()\r\n      " +
                    "    If line Is Nothing Then Exit While\r\n\r\n");
            
            #line 54 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

      if (method.RegexMethod == Model.RegexMethod.Match)
      {

            
            #line default
            #line hidden
            this.Write(@"          Dim match As Match = regex.Match(line)
          If match.Success Then
            Console.WriteLine(""Line[{0}] matches pattern"", i)

            Dim j As Int32 = 0
            Do
              Console.WriteLine(""  Match[{0}] is {1}: {2}"", j, match.GetType().Name, match.Value)

              For k As Int32 = 0 To groupNumbers.Length - 1
                Dim number As Int32 = groupNumbers(k)
                Dim name As String = groupNames(k)
                Dim group As Group = match.Groups(number)
                Dim value As String = If(group.Success, group.Value, ""--- FAILURE ---"")
                Console.WriteLine(""    Group[{0} or '{1}'] is {2}: {3}"", number, name, group.GetType().Name, value)

                For l As Int32 = 0 To group.Captures.Count - 1
                  Dim capture As Capture = group.Captures(l)
                  Console.WriteLine(""      Capture[{0}] is {1}: {2}"", l, capture.GetType().Name, capture.Value)
                Next
              Next

              j += 1
              match = match.NextMatch()
            Loop While match.Success
          Else
            Console.WriteLine(""Line[{0}] does not match pattern"", i)
          End If
");
            
            #line 85 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Replace)
      {

            
            #line default
            #line hidden
            this.Write("          Dim result As String = regex.Replace(line, replacement)\r\n          Cons" +
                    "ole.WriteLine(\"Line[{0}]: \", i, result)\r\n");
            
            #line 92 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Split)
      {

            
            #line default
            #line hidden
            this.Write(@"          Dim result As String() = regex.Split(line)
          Console.WriteLine(""Line[{0}] has been split into {1} chunk(s)"", i, result.Length)
          For j As Int32 = 0 To result.Length - 1
            Console.WriteLine(""  Chunk[{0}]: {1}"", j, result(j))
          Next
");
            
            #line 102 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

      }

            
            #line default
            #line hidden
            this.Write("\r\n          i += 1\r\n        End While\r\n      End Using\r\n");
            
            #line 109 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

    }
    else
    {
      if (method.RegexMethod == Model.RegexMethod.Match)
      {

            
            #line default
            #line hidden
            this.Write(@"      Dim match As Match = regex.Match(input)
      If match.Success Then
        Console.WriteLine(""Input matches pattern"")

        Dim i As Int32 = 0
        Do
          Console.WriteLine(""Match[{0}] is {1}: {2}"", i, match.GetType().Name, match.Value)

          For j As Int32 = 0 to groupNumbers.Length - 1
            Dim number As Int32 = groupNumbers(j)
            Dim name As String = groupNames(j)
            Dim group As Group = match.Groups(number)
            Dim value As String = If(group.Success, group.Value, ""--- FAILURE ---"")
            Console.WriteLine(""  Group[{0} or '{1}'] is {2}: {3}"", number, name, group.GetType().Name, value)

            For k As Int32 = 0 To group.Captures.Count - 1
              Dim capture As Capture = group.Captures(k)
              Console.WriteLine(""    Capture[{0}] is {1}: {2}"", k, capture.GetType().Name, capture.Value)
            Next
          Next

          i += 1
          match = match.NextMatch()
        Loop While match.Success
      Else
        Console.WriteLine(""Input does not match pattern"")
      End If
");
            
            #line 143 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Replace)
      {

            
            #line default
            #line hidden
            this.Write("      Dim result As String = regex.Replace(input, replacement)\r\n      Console.Wri" +
                    "teLine(result)\r\n");
            
            #line 150 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Split)
      {

            
            #line default
            #line hidden
            this.Write("      Dim result As String() = regex.Split(input)\r\n      Console.WriteLine(\"Input" +
                    " has been split into {0} chunks\", result.Length)\r\n      For i As Int32 = 0 To re" +
                    "sult.Length - 1\r\n        Console.WriteLine(\"  Chunk[{0}]: {1}\", i, result(i))\r\n " +
                    "     Next\r\n");
            
            #line 160 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

      }
    }

            
            #line default
            #line hidden
            this.Write("    End Sub\r\n");
            
            #line 165 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

  }

  if (this.Methods.Length != 1)
  {

            
            #line default
            #line hidden
            this.Write("    Sub Main(ByVal args As String())\r\n");
            
            #line 172 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

    for (Int32 i = 0; i < this.Methods.Length; i++)
    {
      var methodName = String.Format("Test{0}", i);

            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 177 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("(args)\r\n");
            
            #line 178 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("    End Sub\r\n");
            
            #line 182 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\VbCodeTemplate.tt"

  }

            
            #line default
            #line hidden
            this.Write("  End Module\r\nEnd Namespace");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
