// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Losenkov.RegexEditor.UI.Generators
{
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class CsCodeTemplate : CodeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace Test\r\n{\r\n  stat" +
                    "ic class Program\r\n  {\r\n    static String s_pattern = ");
            
            #line 14 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.QuoteSnippetString(this.PatternText, "        ")));
            
            #line default
            #line hidden
            this.Write(";\r\n    static RegexOptions s_options = ");
            
            #line 15 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(" | ", this.Options)));
            
            #line default
            #line hidden
            this.Write(";\r\n    static String s_input = ");
            
            #line 16 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.QuoteSnippetString(this.InputText, "        ")));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 17 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

  for (var i = 0; i < this.Methods.Length; i++)
  {
    var method = this.Methods[i];
    var methodName = (this.Methods.Length == 1) ? "Main" : String.Format("Test{0}", i);


            
            #line default
            #line hidden
            this.Write("    static void ");
            
            #line 24 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("(String[] args)\r\n    {\r\n      var regex = new Regex(s_pattern, s_options, TimeSpa" +
                    "n.FromMilliseconds(1000));\r\n");
            
            #line 27 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

    if (method.RegexMethod == Model.RegexMethod.Match)
    {

            
            #line default
            #line hidden
            this.Write("\r\n      var groupNames = regex.GetGroupNames();\r\n      var groupNumbers = regex.G" +
                    "etGroupNumbers();\r\n");
            
            #line 34 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

    }
    if (method.RegexMethod == Model.RegexMethod.Replace)
    {

            
            #line default
            #line hidden
            this.Write("\r\n      var replacement = ");
            
            #line 40 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.QuoteSnippetString(this.ReplacementText, "        ")));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 41 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

    }
    if (method.MultilineInput)
    {

            
            #line default
            #line hidden
            this.Write("      using (var reader = new System.IO.StringReader(s_input))\r\n      {\r\n        " +
                    "for (var i = 1;; i++)\r\n        {\r\n          var line = reader.ReadLine();\r\n     " +
                    "     if (line == null) break;\r\n\r\n");
            
            #line 53 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

      if (method.RegexMethod == Model.RegexMethod.Match)
      {

            
            #line default
            #line hidden
            this.Write(@"          var match = regex.Match(line);
          if (match.Success)
          {
            Console.WriteLine(""Line[{0}] matches pattern"", i);

            for (var j = 0; match.Success; j++, match = match.NextMatch())
            {
              Console.WriteLine(""  Match[{0}] is {1}: {2}"", j, match.GetType().Name, match.Value);

              for (var k = 0; k < groupNumbers.Length; k++)
              {
                var number = groupNumbers[k];
                var name = groupNames[k];
                var group = match.Groups[number];
                var value = group.Success ? group.Value : ""--- FAILURE ---"";
                Console.WriteLine(""    Group[{0} or '{1}'] is {2}: {3}"", number, name, group.GetType().Name, value);

                for (var l = 0; l < group.Captures.Count; l++)
                {
                  var capture = group.Captures[l];
                  Console.WriteLine(""      Capture[{0}] is {1}: {2}"", l, capture.GetType().Name, capture.Value);
                }
              }
            }
          }
          else
          {
            Console.WriteLine(""Line[{0}] does not match pattern"", i);
          }
");
            
            #line 86 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Replace)
      {

            
            #line default
            #line hidden
            this.Write("          var result = regex.Replace(line, replacement);\r\n          Console.Write" +
                    "Line(\"Line[{0}]: \", i, result);\r\n");
            
            #line 93 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Split)
      {

            
            #line default
            #line hidden
            this.Write(@"          var result = regex.Split(line);
          Console.WriteLine(""Line[{0}] has been split into {1} chunk(s)"", i, result.Length);
          for (var j = 0; j < result.Length; j++)
          {
            Console.WriteLine(""  Chunk[{0}]: {1}"", j, result[j]);
          }
");
            
            #line 104 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }

            
            #line default
            #line hidden
            this.Write("        }\r\n      }\r\n");
            
            #line 109 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

    }
    else
    {
      if (method.RegexMethod == Model.RegexMethod.Match)
      {

            
            #line default
            #line hidden
            this.Write(@"      var match = regex.Match(s_input);
      if (match.Success)
      {
        Console.WriteLine(""Input matches pattern"");
        for (var i = 0; match.Success; i++, match = match.NextMatch())
        {
          Console.WriteLine(""Match[{0}] is {1}: {2}"", i, match.GetType().Name, match.Value);

          for (var j = 0; j < groupNumbers.Length; j++)
          {
            var number = groupNumbers[j];
            var name = groupNames[j];
            var group = match.Groups[number];
            var value = group.Success ? group.Value : ""--- FAILURE ---"";
            Console.WriteLine(""  Group[{0} or '{1}'] is {2}: {3}"", number, name, group.GetType().Name, value);

            for (var k = 0; k < group.Captures.Count; k++)
            {
              var capture = group.Captures[k];
              Console.WriteLine(""    Capture[{0}] is {1}: {2}"", k, capture.GetType().Name, capture.Value);
            }
          }
        }
      }
      else
      {
        Console.WriteLine(""Input does not match pattern"");
      }
");
            
            #line 144 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Replace)
      {

            
            #line default
            #line hidden
            this.Write("      var result = regex.Replace(s_input, replacement);\r\n      Console.WriteLine(" +
                    "result);\r\n");
            
            #line 151 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Split)
      {

            
            #line default
            #line hidden
            this.Write("      var result = regex.Split(s_input);\r\n      Console.WriteLine(\"Input has been" +
                    " split into {0} chunks\", result.Length);\r\n      for (var i = 0; i < result.Lengt" +
                    "h; i++)\r\n      {\r\n        Console.WriteLine(\"  Chunk[{0}]: {1}\", i, result[i]);\r" +
                    "\n      }\r\n");
            
            #line 162 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }
    }

            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 167 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

  }

  if (this.Methods.Length != 1)
  {

            
            #line default
            #line hidden
            this.Write("    static void Main(String[] args)\r\n    {\r\n");
            
            #line 175 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

    for (Int32 i = 0; i < this.Methods.Length; i++)
    {
      var methodName = String.Format("Test{0}", i);

            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 180 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("(args);\r\n");
            
            #line 181 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 185 "Q:\Georgy-Losenkov\vsix-regex-editor-2019\src\Editor\UI\Generators\CsCodeTemplate.tt"

  }

            
            #line default
            #line hidden
            this.Write("  }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
