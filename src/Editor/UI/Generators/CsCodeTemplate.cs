// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Losenkov.RegexEditor.UI.Generators
{
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class CsCodeTemplate : CodeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\nnamespace Test\n{\n  using System;\n  using System.Text.RegularExpressions;\n\n  stat" +
                    "ic class Program\n  {\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

  for (var i = 0; i < this.Methods.Length; i++)
  {
    var method = this.Methods[i];
    var methodName = (this.Methods.Length == 1) ? "Main" : String.Format("Test{0}", i);


            
            #line default
            #line hidden
            this.Write("\n    static void ");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("(String[] args)\n    {\n      var pattern = ");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.QuoteSnippetString(this.PatternText, "        ")));
            
            #line default
            #line hidden
            this.Write(";\n      var options = ");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(" | ", this.Options)));
            
            #line default
            #line hidden
            this.Write(";\n      var regex = new Regex(pattern, options, TimeSpan.FromMilliseconds(1000));" +
                    "\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

    if (method.RegexMethod == Model.RegexMethod.Match)
    {

            
            #line default
            #line hidden
            this.Write("\n\n      var groupNames = regex.GetGroupNames();\n      var groupNumbers = regex.Ge" +
                    "tGroupNumbers();\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

    }
    if (method.RegexMethod == Model.RegexMethod.Replace)
    {

            
            #line default
            #line hidden
            this.Write("\n\n      var replacement = ");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.QuoteSnippetString(this.ReplacementText, "        ")));
            
            #line default
            #line hidden
            this.Write(";\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("\n\n      var input = ");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.QuoteSnippetString(this.InputText, "        ")));
            
            #line default
            #line hidden
            this.Write(";\n\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

    if (method.MultilineInput)
    {

            
            #line default
            #line hidden
            this.Write("\n      using (var reader = new System.IO.StringReader(input))\n      {\n        for" +
                    " (var i = 1;; i++)\n        {\n          var line = reader.ReadLine();\n          i" +
                    "f (line == null) break;\n\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

      if (method.RegexMethod == Model.RegexMethod.Match)
      {

            
            #line default
            #line hidden
            this.Write(@"
          var match = regex.Match(line);
          if (match.Success)
          {
            Console.WriteLine(""Line[{0}] matches pattern"", i);

            for (var j = 0; match.Success; j++, match = match.NextMatch())
            {
              Console.WriteLine(""  Match[{0}] is {1}: {2}"", j, match.GetType().Name, match.Value);

              for (var k = 0; k < groupNumbers.Length; k++)
              {
                var number = groupNumbers[k];
                var name = groupNames[k];
                var group = match.Groups[number];
                var value = group.Success ? group.Value : ""--- FAILURE ---"";
                Console.WriteLine(""    Group[{0} or '{1}'] is {2}: {3}"", number, name, group.GetType().Name, value);

                for (var l = 0; l < group.Captures.Count; l++)
                {
                  var capture = group.Captures[l];
                  Console.WriteLine(""      Capture[{0}] is {1}: {2}"", l, capture.GetType().Name, capture.Value);
                }
              }
            }
          }
          else
          {
            Console.WriteLine(""Line[{0}] does not match pattern"", i);
          }
");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Replace)
      {

            
            #line default
            #line hidden
            this.Write("\n          var result = regex.Replace(line, replacement);\n          Console.Write" +
                    "Line(\"Line[{0}]: \", i, result);\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Split)
      {

            
            #line default
            #line hidden
            this.Write(@"
          var result = regex.Split(line);
          Console.WriteLine(""Line[{0}] has been split into {1} chunk(s)"", i, result.Length);
          for (var j = 0; j < result.Length; j++)
          {
            Console.WriteLine(""  Chunk[{0}]: {1}"", j, result[j]);
          }
");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }

            
            #line default
            #line hidden
            this.Write("\n        }\n      }\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

    }
    else
    {
      if (method.RegexMethod == Model.RegexMethod.Match)
      {

            
            #line default
            #line hidden
            this.Write(@"
      var match = regex.Match(input);
      if (match.Success)
      {
        Console.WriteLine(""Input matches pattern"");
        for (var i = 0; match.Success; i++, match = match.NextMatch())
        {
          Console.WriteLine(""Match[{0}] is {1}: {2}"", i, match.GetType().Name, match.Value);

          for (var j = 0; j < groupNumbers.Length; j++)
          {
            var number = groupNumbers[j];
            var name = groupNames[j];
            var group = match.Groups[number];
            var value = group.Success ? group.Value : ""--- FAILURE ---"";
            Console.WriteLine(""  Group[{0} or '{1}'] is {2}: {3}"", number, name, group.GetType().Name, value);

            for (var k = 0; k < group.Captures.Count; k++)
            {
              var capture = group.Captures[k];
              Console.WriteLine(""    Capture[{0}] is {1}: {2}"", k, capture.GetType().Name, capture.Value);
            }
          }
        }
      }
      else
      {
        Console.WriteLine(""Input does not match pattern"");
      }
");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Replace)
      {

            
            #line default
            #line hidden
            this.Write("\n      var result = regex.Replace(input, replacement);\n      Console.WriteLine(re" +
                    "sult);\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }
      else if (method.RegexMethod == Model.RegexMethod.Split)
      {

            
            #line default
            #line hidden
            this.Write("\n      var result = regex.Split(input);\n      Console.WriteLine(\"Input has been s" +
                    "plit into {0} chunks\", result.Length);\n      for (var i = 0; i < result.Length; " +
                    "i++)\n      {\n        Console.WriteLine(\"  Chunk[{0}]: {1}\", i, result[i]);\n     " +
                    " }\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

      }
    }

            
            #line default
            #line hidden
            this.Write("\n    }\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

  }

  if (this.Methods.Length != 1)
  {

            
            #line default
            #line hidden
            this.Write("\n    static void Main(String[] args)\n    {\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

    for (Int32 i = 0; i < this.Methods.Length; i++)
    {
      var methodName = String.Format("Test{0}", i);

            
            #line default
            #line hidden
            this.Write("\n      ");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("(args);\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("\n    }\n");
            
            #line 1 "D:\Documents\Visual Studio 2022\Projects\RegexEditor-vsix2022\src\Editor\UI\Generators\CsCodeTemplate.tt"

  }

            
            #line default
            #line hidden
            this.Write("\n  }\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
